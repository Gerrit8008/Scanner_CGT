#!/usr/bin/env python3
"""
Script to split the large scan.py file into smaller, more manageable modules
"""
import os
import re
import shutil

def create_directory_structure():
    """Create the necessary directory structure"""
    os.makedirs("scanner", exist_ok=True)
    
    # Create __init__.py to make it a package
    init_content = """# scanner package
# This file was auto-generated by split_scan.py

# Import all modules to make their functions available
from .core import *
from .network import *
from .web import *
from .dns import *
from .system import *
from .risk import *

print("Using modular scanner structure.")
"""
    
    with open(os.path.join("scanner", "__init__.py"), "w") as f:
        f.write(init_content)
    
    print("✅ Created directory structure")

def extract_functions(source_file, pattern, target_file, module_name, imports=None):
    """Extract functions from source_file and write to target_file"""
    with open(source_file, "r") as f:
        content = f.read()
    
    # Find all functions matching the pattern
    functions = []
    for func_name in pattern:
        func_pattern = f"def {func_name}.*?(?=def \w+:|$)"
        func_match = re.search(func_pattern, content, re.DOTALL)
        if func_match:
            functions.append(func_match.group(0))
    
    if not functions:
        print(f"❌ No functions found for {module_name}")
        return False
    
    # Create the new module file
    with open(target_file, "w") as f:
        # Add the module docstring
        f.write(f'"""\nscanner.{module_name} - {module_name.capitalize()} scanning functionality\n"""\n\n')
        
        # Add imports
        f.write('import logging\n')
        if imports:
            for imp in imports:
                f.write(f'{imp}\n')
        f.write('\n')
        
        # Add all the functions
        for func in functions:
            f.write(func + "\n\n")
    
    print(f"✅ Created {target_file} with {len(functions)} functions")
    return True

def create_proxy_scan(target_file):
    """Create a proxy scan.py file that imports from the new modular structure"""
    proxy_content = """# scan.py - Proxy for backwards compatibility
# This file was auto-generated by split_scan.py

# Import all functions from the new modular structure
from scanner import *

print("Using modular scanner structure. Direct imports from scan.py are deprecated.")
"""
    
    with open(target_file, "w") as f:
        f.write(proxy_content)
    
    print(f"✅ Created proxy {target_file}")

def main():
    """Main function to split scan.py into modules"""
    print("Starting to split scan.py into modules...")
    
    # Create a backup of the original file
    shutil.copy2("scan.py", "scan.py.bak")
    print("✅ Created backup of scan.py")
    
    # Create directory structure
    create_directory_structure()
    
    # Define the modules and their functions
    modules = [
        {
            "name": "core",
            "file": "scanner/core.py",
            "functions": ["run_security_scan", "process_scan_results", "generate_scan_report"],
            "imports": [
                "import requests",
                "import json",
                "from datetime import datetime",
                "from .network import *",
                "from .web import *",
                "from .dns import *",
                "from .system import *",
                "from .risk import *"
            ]
        },
        {
            "name": "network",
            "file": "scanner/network.py",
            "functions": ["get_client_and_gateway_ip", "scan_gateway_ports", "get_default_gateway_ip"],
            "imports": [
                "import socket",
                "import subprocess",
                "import re"
            ]
        },
        {
            "name": "web",
            "file": "scanner/web.py",
            "functions": ["check_ssl_certificate", "check_security_headers", "detect_cms", 
                         "analyze_cookies", "detect_web_framework", "crawl_for_sensitive_content"],
            "imports": [
                "import requests",
                "import ssl",
                "import socket",
                "from bs4 import BeautifulSoup",
                "from urllib.parse import urlparse",
                "import re",
                "import json"
            ]
        },
        {
            "name": "dns",
            "file": "scanner/dns.py",
            "functions": ["analyze_dns_configuration", "check_spf_status", 
                          "check_dmarc_record", "check_dkim_record"],
            "imports": [
                "import dns.resolver",
                "import re"
            ]
        },
        {
            "name": "system",
            "file": "scanner/system.py",
            "functions": ["check_os_updates", "check_firewall_status"],
            "imports": [
                "import platform",
                "import subprocess"
            ]
        },
        {
            "name": "risk",
            "file": "scanner/risk.py",
            "functions": ["determine_industry", "calculate_industry_percentile", 
                         "categorize_risks_by_services", "generate_threat_scenario"],
            "imports": [
                "import json",
                "import random"
            ]
        }
    ]
    
    # Extract functions for each module
    for module in modules:
        extract_functions(
            "scan.py",
            module["functions"],
            module["file"],
            module["name"],
            module["imports"]
        )
    
    # Create a proxy scan.py
    create_proxy_scan("scan.py.new")
    
    print("\n✅ Process complete! To finalize the changes:")
    print("1. Verify that all functions were extracted correctly")
    print("2. Check imports in the new module files")
    print("3. Replace the original scan.py with scan.py.new")
    print("\nYou can do this by running:")
    print("  mv scan.py.new scan.py")

if __name__ == "__main__":
    main()